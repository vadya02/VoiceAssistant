"""
Django settings for AssistantBackend project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from datetime import timedelta

# from scipy.linalg import get_blas_funcs, triu
# try:
#     from numpy import triu
# except ImportError:
#     from scipy.linalg import get_blas_funcs, triu
import gensim
import nltk
from dotenv import load_dotenv
from nltk.corpus import stopwords
from numpy import triu

load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$j_2!@zn(y8%_efv=(5vm1m2r8utw_3junjzw@z-co90)fiu6b"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "rest_framework",
    "djoser",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "AssistantBackendApp",
    "rest_framework.authtoken",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.security.SecurityMiddleware",
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 'ApacheBack.middleware.RequestHistoryMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = "AssistantBackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "AssistantBackend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
print(os.getenv("DB_NAME"))
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("USER"),
        "PASSWORD": os.getenv("PASSWORD"),
        "HOST": os.getenv("HOST"),  # Или IP-адрес вашего PostgreSQL сервера
        "PORT": os.getenv("PORT"),  # Порт PostgreSQL (по умолчанию 5432)
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True
TIME_ZONE = "Asia/Shanghai"
ROOT_URLCONF = "AssistantBackend.urls"
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}


CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Origin",
]
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Замените на адрес вашего фронтенда
    "http://127.0.0.1:3000",  # Замените на адрес вашего фронтенда
    # Другие допустимые источники
]

DB_NAME = os.getenv('DB_NAME')
USER = os.getenv('USER')
PASSWORD = os.getenv('PASSWORD')
HOST = os.getenv('HOST')
PORT = os.getenv('PORT')


class Word2VecModel:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)
            cls._instance.load_model()
        return cls._instance

    def load_model(self):
        current_directory = os.path.dirname(os.path.abspath(__file__))
    
    # Составляем путь к файлу model.bin
        model_path = os.path.join(current_directory, 'model.bin')
        # model_path = 'C:/Users/ehiri/Desktop/apache-front/VoiceAssistant/assistant-back/AssistantBack/AssistantBack/model.bin'  # Путь к вашей модели
        self.model = gensim.models.KeyedVectors.load_word2vec_format(model_path, binary=True)

WORD2VEC_MODEL = Word2VecModel()





class NLTKResources:
    _instance = None
    # stop_words = set(stopwords.words('russian'))
    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)
            cls._instance.load_resources()
        return cls._instance

    def load_resources(self):
        # Загрузка стоп-слов
        nltk.download('stopwords')
        nltk.download('punkt')
        nltk.download('wordnet')
        self.stop_words = set(stopwords.words('russian'))
        # Здесь можно добавить и другие ресурсы, например, POS-теггеры и т.д.

        # После загрузки ресурсов вы можете выполнить другие операции, если необходимо

# Создаем экземпляр класса
NLTK_RESOURCES = NLTKResources()